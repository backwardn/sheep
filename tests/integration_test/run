#!/bin/bash

set -e

#
# Log on stdout
#
# $* - Text to log
#
log() {
	echo "[$(date "+%Y-%m-%d %H:%M:%S")] $*"
}

#
# $1 - MAC address
#
get_ip_from_mac() {
	sudo arp -an | awk /$1/'{print $2}' | sed 's/[()]//g'
}

#
# $1 - MAC address
#
delete_arp_entry() {
	while read ip; do
		log "Deleting ARP entry for IP address '${ip}'"
		sudo arp -d ${ip}
	done < <(get_ip_from_mac ${1})
}

#
# Look at the ARP table every 10 seconds until either the IP address
# matching the input MAC address is found or the timeout is reached.
#
# $1 - MAC address
# $2 - Timeout in seconds
#
wait_for_ip() {
	local mac=$1
	local max_wait=$2
	local s_time=$(date +%s)
	local c_time=
	local ip=
	while true; do
		c_time=$(date +%s)

		ip=$(get_ip_from_mac ${mac})
		if [ -n "${ip}" ]; then
			log "IP $ip found for MAC ${mac}"
			break
		fi

		if [ $(($c_time - $s_time)) -gt ${max_wait} ]; then
			log "ERROR : Timeout..."
			exit 1
		fi

		log "Waiting for IP to be reachable for MAC ${mac}..."

		sleep 10
	done
}

#
# Run a command through SSH
#
# $1 - Linux IP
# $2 - Linux username
# $3 - Linux password
# $* Command to execute
#
ssh_cmd() {
	local ip=$1
	local username=$2
	local password=$3
	shift
	shift
	shift
	{
		timeout 20 sshpass -p ${password} \
			ssh -o StrictHostKeyChecking=no \
			-o UserKnownHostsFile=/dev/null \
			-o LogLevel=QUIET \
			${username}@${ip} "$*"
		return $?
	} < /dev/null
}

#
# Wait untill SSH port is open and SSH login using specified user/password works
# If the timeout is reached, it will exit with an error code.
#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
# $4 - Timeout in secconds
#
wait_for_ssh() {
	local ip=$1
	local username=$2
	local password=$3
	local max_wait=$4
	local s_time=$(date +%s)
	local c_time=
	local ssh_ok=0
	while true; do
		c_time=$(date +%s)
		ssh_ok=$(sudo nmap -sT -p 22 ${ip} | grep '22/tcp open' | wc -l)
		if [ $ssh_ok -eq 1 ]; then
			if [ "$(ssh_cmd ${ip} ${username} ${password} echo ok)" = "ok" ]; then
				log "SSH connection ok"
				break
			fi
			ssh_ok=0
		fi

		if [ $(($c_time - $s_time)) -gt ${max_wait} ]; then
			log "ERROR : Timeout !"
			exit 1
		fi

		log "Waiting for Linux to be SSH accessible on IP ${ip}..."
		sleep 10
	done
}

#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
#
print_sheep_log() {
	log ""
	log "!!! See Sheep log below !!!"
	log ""
	ssh_cmd ${1} ${2} ${3} 'cat /var/log/sheep.log'
	log ""
	log "!!! End of Sheep log !!!"
	log ""
}

#
# $1 - Linux IP address
# $2 - Linux username
# $3 - Linux password
# $4 - Timeout in secconds
#
wait_for_installation_complete() {
	local ip=$1
	local username=$2
	local password=$3
	local max_wait=$4
	local s_time=$(date +%s)
	local c_time=
	local ssh_ok=0
	while true; do
		c_time=$(date +%s)

		if [ "$(ssh_cmd ${ip} ${username} ${password} 'if [ -e /var/run/sheep.success ] ; then echo ok ; fi')" == 'ok' ]; then
			log 'Installation complete'
			break
		fi

		if [ $(($c_time - $s_time)) -gt ${max_wait} ]; then
			print_sheep_log ${ip} ${username} ${password}
			exit 1
		fi

		log "Waiting for Sheep to complete OS installation..."
		sleep 10
	done

	print_sheep_log ${ip} ${username} ${password}
}

#
# Deploy TFTP and HTTP configuration file for network boot
#
deploy_boot_config() {
	sudo mkdir -p /var/www/html/sheep

	sudo rm -f /var/www/html/sheep/${CONFIG_NAME} /var/tftp/pxelinux.cfg/conf/*/${CONFIG_NAME} /var/www/html/sheep/${CONFIG_NAME}.yml
	sudo cp ${SHEEP_SCRIPT_SOURCE} /var/www/html/sheep/${CONFIG_NAME}

	if [ $(echo ${DUT_NAME} | grep '\-legacy' | wc -l) -eq 1 ]; then
		# Legacy mode (using pxelinux)
		sudo bash -c "cat > /var/tftp/pxelinux.cfg/conf/pxelinux/${CONFIG_NAME}" <<- EOF
			default sheep
			label sheep
			kernel /sheep-live/vmlinuz
			append boot=live fetch=${SHEEP_SQUASHFS} initrd=/sheep-live/initrd.img ssh=sheep ${EXTRA_KERNEL_CMDLINE} startup=/usr/bin/sheep-service sheep.script=${SHEEP_SCRIPT} sheep.config=${SHEEP_CONFIG} sheep.log.level=DEBUG
		EOF
	else
		# UEFI mode (using GRUB)
		sudo bash -c "cat > /var/tftp/pxelinux.cfg/conf/grub/${CONFIG_NAME}" <<- EOF
			cat > ${WORKDIR}/netboot <<- EOF
				set timeout=2
				set default="0"

				menuentry "Sheep" {
				    linux /sheep-live/vmlinuz boot=live fetch=${SHEEP_SQUASHFS} ssh=sheep ${EXTRA_KERNEL_CMDLINE} startup=/usr/bin/sheep-service sheep.script=${SHEEP_SCRIPT} sheep.config=${SHEEP_CONFIG} sheep.log.level=DEBUG
				    initrd /sheep-live/initrd.img
				}
		EOF
	fi

	local tmp_config=$(mktemp)
	chmod +r ${tmp_config}

	sed "s#@@SHEEP_CI_RUNNER_IP@@#${SHEEP_CI_RUNNER_IP}#g" ${SHEEP_CONFIG_SOURCE} | sed "s#@@SHEEP_CI_SSH_PUB_KEY@@#$(cat ${HOME}/.ssh/id_rsa.pub)#g" > ${tmp_config}

	sudo cp ${tmp_config} /var/www/html/sheep/${CONFIG_NAME}.yml

	log "Set PXE Pilot configuration '${CONFIG_NAME}' for machine '${DUT_NAME}'"
	pxe-pilot config deploy ${CONFIG_NAME} ${DUT_NAME} > /dev/null 2>&1
}

#
# $1 - DUT Name
#
get_ipmi_ip() {
	pxe-pilot host list | grep " $1 " | sed -e 's/.* | \([0-9]*.[0-9]*.[0-9]*.[0-9]*\) | .*/\1/'
}

#
# $1 - DUT Name
# $2 - IPMI command
#
ipmi() {
	set +e
	local cmd="ipmitool -I lanplus -U USERID -P PASSW0RD -H $(get_ipmi_ip ${1}) ${2}"
	sleep 3
	${cmd}
	local status=$?
	set -e
	if [ ${status} -ne 0 ]; then
		sleep 3
		${cmd}
	fi
}

#
# $1 - DUT Name
#
start_dut() {
	local status=
	local s_time=$(date +%s)
	local c_time=
	local max_wait=20

	ipmi $1 "power on" > /dev/null 2>&1

	while true; do
		c_time=$(date +%s)
		status=$(status_dut $1)
		if [ ${status} == 'on' ]; then
			break
		fi

		if [ $(($c_time - $s_time)) -gt ${max_wait} ]; then
			log "Time out due to ipmi unreachable"
			exit 1
		fi

		sleep 1
	done

}

#
# $1 - DUT Name
#
stop_dut() {
	local status=
	local s_time=$(date +%s)
	local c_time=
	local max_wait=20

	ipmi $1 "power off" > /dev/null 2>&1

	while true; do
		c_time=$(date +%s)
		status=$(status_dut $1)
		if [ ${status} == 'off' ]; then
			break
		fi

		if [ $(($c_time - $s_time)) -gt ${max_wait} ]; then
			log "Time out due to ipmi unreachable"
			exit 1
		fi

		sleep 1
	done
}

#
# $1 - DUT Name
#
status_dut() {
	local status=$(ipmi $1 "power status" 2> /dev/null | sed "s/Chassis Power is //")
	if [[ ${status} != 'on' && ${status} != 'off' ]]; then
		echo 'unknown'
		return
	fi
	echo "${status}"
}

#
# $1 - PXE Pilot host name
#
get_mac_address() {
	echo $(curl ${PXE_PILOT_API}/v1/hosts 2> /dev/null | jq -r ".[] | select(.name == \"${1}\") | .macAddresses[0]")
}

#
# Print current date and time in format "dd/mm/yyyy hh:mm:ss"
#
#
current_datetime() {
	date "+%d/%m/%Y %H:%M:%S"
}

#
# $1 - DUT Name
#
start_asciinema() {
	mkdir -p ${HOME}/job-cast
	local ip="$(get_ipmi_ip ${1})"
	local sol_script=${WORKDIR}/sol-${1}.sh

	cat > ${sol_script} <<- EOF
		while true ; do
			ipmitool -I lanplus -U USERID -P PASSW0RD -H ${ip} sol deactivate
			sleep 1
			ipmitool -I lanplus -U USERID -P PASSW0RD -H ${ip} sol activate
		done
	EOF

	screen -d -m asciinema rec -c "bash ${sol_script}" ${ASCIINEMA_FILE}
}

#
# $1 - DUT Name
#
stop_asciinema() {
	local sol_script=${WORKDIR}/sol-${1}.sh

	local pid=$(
		ps -edf | grep -e "[a]sciinema rec .* ${sol_script}" | grep -v SCREEN | head -n 1 | awk '{print $2}'
	)

	if [ -z "${pid}" ]; then
		log "!!! No asciinema process is running for machine '${1}' !!!"
	else
		kill ${pid}
	fi

	if [ -e ${ASCIINEMA_FILE} ]; then
		log "Asciinema recording saved in ${ASCIINEMA_FILE}"
		cp ${ASCIINEMA_FILE} ${CI_PROJECT_DIR}
	fi
}

#
# Delete configurations created by the the test
#
cleanup() {
	log "Stopping asciinema SOL recording for ${DUT_NAME}"
	stop_asciinema ${DUT_NAME}

	log "Cleanup environment"
	sudo rm -f /var/tftp/pxelinux.cfg/conf/*/${CONFIG_NAME}
	sudo rm -f /var/www/html/sheep/${CONFIG_NAME}

	touch ${SHEEP_RESULTS_FILE}
	if [ $(cat ${SHEEP_RESULTS_FILE} | wc -l) -eq 0 ]; then
		echo "Pipeline ID,Job ID,Commit ID,Start date,End date,DUT,Sheep config,Final Step,Git ref" > ${SHEEP_RESULTS_FILE}
	fi
	echo "${CI_PIPELINE_ID},${CI_JOB_ID},${CI_COMMIT_SHORT_SHA},${TEST_START_DATE},$(current_datetime),${DUT_NAME},${CONFIG_FILE_NAME},${current_step},${CI_COMMIT_REF_NAME}" >> ${SHEEP_RESULTS_FILE}
}

#
# Run the overall testing scenario
#
main() {
	TEST_START_DATE=$(current_datetime)
	current_step=begin

	local dut_status="$(status_dut ${DUT_NAME})"

	log "Machine '${DUT_NAME}' power status is ${dut_status}"

	if [ ${dut_status} == 'on' ]; then
		log "Stopping machine '${DUT_NAME}'"
		current_step=stop_dut
		stop_dut ${DUT_NAME}
	fi

	log "Generate and deploy netboot configuration..."
	current_step=deploy_boot_config
	deploy_boot_config

	mac=$(get_mac_address ${DUT_NAME})
	log "MAC address for host '${DUT_NAME}' is ${mac}"

	log "Deleting ARP entry for MAC ${mac}"
	current_step=delete_arp_entry
	delete_arp_entry ${mac}

	log "Starting test on machine '${DUT_NAME}'"
	current_step=start_dut
	start_dut ${DUT_NAME}

	sleep 5

	#
	# In theory, we should start the SOL session and then start the machine. Because of a buggy
	# Behaviour on OCP Winterfell servers (DUT we use for legacy boot), we have to do it in the
	# reverse order. When starting the server with a SOL session already activated, serial output
	# is not always correctly captured. Starting the SOL session a couple of seconds after the
	# server is powered on do the trick. The downside is that we can lost the begining of the boot,
	# usually some POST codes, but in our use case it's not a big issue...
	#
	log "Starting asciinema SOL recording for machine '${DUT_NAME}'"
	start_asciinema ${DUT_NAME}

	wait_for_ip ${mac} 450
	ip=$(get_ip_from_mac ${mac})
	if [ -z "${ip}" ]; then
		log "Error.... Server did not boot !"
		exit 1
	fi

	log "Waiting for Sheep Live to boot..."
	current_step=wait_for_ssh_grml
	wait_for_ssh ${ip} root sheep 600

	log "Waiting for the installation process to complete..."
	current_step=wait_for_installation_complete
	wait_for_installation_complete ${ip} root sheep 600

	log "Rebooting the machine..."
	current_step=reboot
	pxe-pilot host reboot ${DUT_NAME}

	log "Waiting for newly installed Linux to boot..."
	current_step=wait_for_ssh_linux
	wait_for_ssh ${ip} linux linux 600

	current_step=check_compliance

	export IP="${ip}"
	export USER=linux
	export PASSWORD=linux
	export INPUT_TEST=${SYS_TEST_FILE}
	local test_fail=false
	c=0
	current_test=$(yq -r ".${CI_JOB_NAME}[$c].name" "${SYS_TEST_FILE}")
	while [ "${current_test}" != "null" ]; do
		log "Performing test ${current_test}"
		export CURRENT_KEY=".${CI_JOB_NAME}[$c]"

		set +e
		bats ${CI_PROJECT_DIR}/tests/integration_test/"${current_test}".bats
		local bats_status=$?
		set -e
		if [ ${bats_status} -ne 0 ]; then
			test_fail=true
		fi
		c=$(($c + 1))
		current_test=$(yq -r ".${CI_JOB_NAME}[$c].name" "${SYS_TEST_FILE}")
	done

	if [ "${test_fail}" == "true" ]; then
		log "System test fail - See the log"
		exit 1
	fi

	current_step=power_off
	log "Power off server ${DUT_NAME}"
	# Sending a poweroff command through ssh lead to close SSH connection and return a non-zero
	# exit code. Disabling -e flag to ignore this error
	set +e
	ssh_cmd ${ip} linux linux sudo poweroff
	set -e

	current_step=success
	log "Success :)"
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
SHEEP_RESULTS_FILE=$HOME/sheep_integration_tests.csv
SHEEP_SCRIPT_SOURCE=$SCRIPT_DIR/../../sheep
SHEEP_CONFIG_SOURCE=$SCRIPT_DIR/${CONFIG_FILE_NAME}
DUT_NAME=${CI_RUNNER_DESCRIPTION}
CONFIG_NAME=${CI_RUNNER_DESCRIPTION}_${CI_COMMIT_SHORT_SHA}_${CI_PIPELINE_ID}_${CI_JOB_ID}
SHEEP_CI_RUNNER_IP=$(cat /etc/sheep-ci-runner-ip)
SHEEP_SQUASHFS=http://${SHEEP_CI_RUNNER_IP}/sheep-live.squashfs
SHEEP_SCRIPT=http://${SHEEP_CI_RUNNER_IP}/sheep/${CONFIG_NAME}
SHEEP_CONFIG=http://${SHEEP_CI_RUNNER_IP}/sheep/${CONFIG_NAME}.yml
PXE_PILOT_API=http://${SHEEP_CI_RUNNER_IP}:3478
ASCIINEMA_FILE=${HOME}/job-cast/${CONFIG_NAME}.cast
WORKDIR=$(mktemp -d)

if [ -z "${CI_RUNNER_DESCRIPTION}" ]; then
	log "ERROR : Variable 'CI_RUNNER_DESCRIPTION' is not defined..."
	exit 1
fi

if [ -z "${SHEEP_CI_RUNNER_IP}" ]; then
	log "ERROR : Variable 'SHEEP_CI_RUNNER_IP' is not defined..."
	exit 1
fi

if [ -z "${CONFIG_FILE_NAME}" ]; then
	log "ERROR : Variable 'CONFIG_FILE_NAME' is not defined..."
	exit 1
fi

current_step=init

trap cleanup EXIT

main
